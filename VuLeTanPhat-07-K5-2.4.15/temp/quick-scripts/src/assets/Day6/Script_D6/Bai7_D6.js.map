{"version":3,"sources":["assets/Day6/Bai7_D6.js"],"names":["callbackManager","funcArray","currentFuncs","retryCount","run","console","log","index","newFuncs","hasError","execute","length","setTimeout","func","originalIndex","cb","err","message","push","e","wrappedFuncs","map","f","i","asyncFunc1","callback","asyncFunc2","failOnce","asyncFunc4","Error","asyncFunc3"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Hàm chính: nhận vào 1 mảng các hàm async callback-style\nfunction callbackManager(funcArray) {\n  let currentFuncs = [...funcArray]; // Clone mảng để xử lý, tránh làm hỏng mảng gốc\n  let retryCount = 0;                // Đếm số lần chạy lại (để biết là lần mấy)\n\n  // Hàm phụ để chạy loạt hàm hiện tại\n  function run() {\n    // In thông báo chạy lần đầu hay chạy lại\n    console.log(retryCount === 0 ? \"\\n🔁 Bắt đầu chạy hàm lần đầu...\\n\" : `\\n🔁 Bắt đầu chạy lại lần ${retryCount}...\\n`);\n    \n    let index = 0;            // Biến đếm vị trí hàm đang chạy\n    let newFuncs = [];        // Mảng mới chứa các hàm thành công để chạy lại nếu cần\n    let hasError = false;     // Cờ báo nếu có lỗi xảy ra\n\n    // Hàm đệ quy chạy từng hàm một theo thứ tự\n    function execute() {\n      // Khi đã chạy hết các hàm\n      if (index >= currentFuncs.length) {\n        if (hasError) {\n          // Nếu có lỗi: thông báo và chuẩn bị chạy lại sau 5s\n          console.log(\"\\n❌ Có hàm bị lỗi, sẽ chạy lại toàn bộ sau 5s...\\n\");\n          currentFuncs = newFuncs; // Chỉ giữ lại hàm thành công để chạy lại\n          retryCount++;            // Tăng số lần chạy lại\n          setTimeout(run, 5000);   // Chờ 5s rồi chạy lại\n        } else {\n          // Nếu tất cả đều thành công thì kết thúc\n          console.log(\"\\n✅ Tất cả hàm đã chạy thành công!\\n\");\n        }\n        return;\n      }\n\n      // Lấy hàm hiện tại theo index\n      const func = currentFuncs[index];\n\n      // In trạng thái bắt đầu chạy hàm\n      console.log(`Started asyncFunc${func.originalIndex + 1}`);\n\n      try {\n        // Gọi hàm async với callback nhận lỗi (err)\n        func.cb((err) => {\n          if (err) {\n            // Nếu lỗi: thông báo lỗi\n            console.log(`❌ Hàm ${func.originalIndex} bị lỗi: ${err.message}`);\n            hasError = true; // Cắm cờ lỗi\n            // Không push vào newFuncs → bỏ luôn khỏi lần chạy sau\n          } else {\n            // Nếu thành công: in log và đưa vào danh sách chạy tiếp\n            console.log(`Completed asyncFunc${func.originalIndex + 1}`);\n            console.log(`✅ Hàm ${func.originalIndex} chạy thành công!`);\n            newFuncs.push(func); // Chỉ giữ hàm đã thành công\n          }\n          index++;      // Tăng chỉ số để xử lý tiếp\n          execute();    // Gọi đệ quy cho hàm tiếp theo\n        });\n      } catch (e) {\n        // Nếu có lỗi throw ngoài callback (hiếm): bắt ngoại lệ\n        console.log(`❌ Exception tại hàm ${func.originalIndex}: ${e.message}`);\n        hasError = true;\n        index++;\n        execute(); // Tiếp tục xử lý hàm sau\n      }\n    }\n\n    // Bắt đầu chuỗi gọi đệ quy\n    execute();\n  }\n\n  // Gắn thông tin chỉ số ban đầu vào từng hàm để in log chính xác\n  const wrappedFuncs = funcArray.map((f, i) => ({ cb: f, originalIndex: i }));\n  currentFuncs = wrappedFuncs; // Cập nhật mảng đang chạy\n  run(); // Bắt đầu thực thi chuỗi\n}\n\nfunction asyncFunc1(callback) {\n  console.log(\"Started asyncFunc1\");\n  setTimeout(() => {\n    console.log(\"Completed asyncFunc1\");\n    callback();\n  }, 3000);\n}\n\nfunction asyncFunc2(callback) {\n  console.log(\"Started asyncFunc2\");\n  setTimeout(() => {\n    console.log(\"Completed asyncFunc2\");\n    callback();\n  }, 2000);\n}\n\nlet failOnce = true;\nfunction asyncFunc4(callback) {\n  console.log(\"Started asyncFunc4\");\n  setTimeout(() => {\n    if( failOnce) {\n      failOnce = false;\n      callback(new Error(\"Error in asyncFunc4\"));\n    } else {\n      console.log(\"Completed asyncFunc4\");\n      callback();\n    }\n  },1000);\n}\n\n\nfunction asyncFunc3(callback) {\n  console.log(\"Started asyncFunc3\");\n  setTimeout(() => {\n    console.log(\"Completed asyncFunc3\");\n    callback();\n  }, 1000);\n}\n\n// Driver code\n// lan chay dau tien\ncallbackManager([asyncFunc1, asyncFunc2, asyncFunc4, asyncFunc3]);\n\n// sau khi chay nhan xet:\n// ke tu khi lenh Started asyncFunc1 thi mat 3s de hien completed tuong tu asyncFunc2 mat 2s va cuoi cung mat 1s, moi thu in ra theo dung thu tu voi dung so giay.\n\n// lan chay thu 2 (sau 7s)\n\n// setTimeout(() =>{\n//   console.log(\"_________________________\")\n//   console.log(\"CALLING AGAINNNNNNN\")\n//   callbackManager([asyncFunc1, asyncFunc2, asyncFunc4, asyncFunc3]);\n// },7000)\n\n\n\n\n\n\n\n\n//bonus ASCI tu chatGPT de hieu Flow\n\n// funcArray = [asyncFunc1, asyncFunc2, asyncFunc3]\n\n// Gọi callbackManager([asyncFunc1, asyncFunc2, asyncFunc3])\n// ↓\n// Gọi execute(0)\n// ↓\n// Gọi asyncFunc1(callback: () => execute(1))\n//    ↓\n//    Đợi 3 giây...\n//    ↓\n//    Gọi callback → execute(1)\n//    ↓\n//    Gọi asyncFunc2(callback: () => execute(2))\n//        ↓\n//        Đợi 2 giây...\n//        ↓\n//        Gọi callback → execute(2)\n//        ↓\n//        Gọi asyncFunc3(callback: () => execute(3))\n//            ↓\n//            Đợi 1 giây...\n//            ↓\n//            Gọi callback → execute(3)\n//                ↓\n//                Thoát vì index >= funcArray.length\n\n\n// async4 throw new error, chen vao giua, khi ham loi go ra va chay lai cho du\n\n// lan sau goi lai se chay het duoc"]}