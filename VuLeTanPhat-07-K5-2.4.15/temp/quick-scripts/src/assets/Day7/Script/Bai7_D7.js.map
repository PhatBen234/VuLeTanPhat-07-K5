{"version":3,"sources":["assets/Day7/Script/Bai7_D7.js"],"names":["cc","Class","Component","properties","logLabel","Label","start","lazyMan","LazyMan","eat","sleep","name","label","queue","sayName","_run","_log","message","log","string","push","Promise","resolve","food","ms","setTimeout","action"],"mappings":";;;;;;+CACA;;;;;;;;;;;;AADAA,EAAE,CAACC,KAAH,CAAS;EACP,WAASD,EAAE,CAACE,SADL;EAGPC,UAAU,EAAE;IACVC,QAAQ,EAAEJ,EAAE,CAACK,KADH,CACU;;EADV,CAHL;EAOPC,KAPO,mBAOC;IAAE;IACR;IACA,IAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,MAAZ,EAAoB,KAAKJ,QAAzB,CAAhB,CAFM,CAE6C;;IACnDG,OAAO,CACJE,GADH,CACO,OADP,EAEGC,KAFH,CAES,IAFT,EAGGD,GAHH,CAGO,WAHP,EAIGC,KAJH,CAIS,IAJT,EAKGD,GALH,CAKO,MALP;EAMD;AAhBM,CAAT;;IAmBMD;EACJ,iBAAYG,IAAZ,EAAkBC,KAAlB,EAAyB;IACvB,KAAKC,KAAL,GAAa,EAAb,CADuB,CACN;;IACjB,KAAKD,KAAL,GAAaA,KAAb,CAFuB,CAEH;;IACpB,KAAKE,OAAL,CAAaH,IAAb,EAHuB,CAGJ;;IACnB,KAAKI,IAAL,GAJuB,CAIV;;EACd;;;;SAEDC,OAAA,cAAKC,OAAL,EAAc;IACZjB,EAAE,CAACkB,GAAH,CAAOD,OAAP,EADY,CACI;;IAChB,IAAI,KAAKL,KAAT,EAAgB;MACd,KAAKA,KAAL,CAAWO,MAAX,IAAqBF,OAAO,GAAG,IAA/B,CADc,CACuB;IACtC;EACF;;SAEDH,UAAA,iBAAQH,IAAR,EAAc;IAAA;;IAAE;IACd,KAAKE,KAAL,CAAWO,IAAX,CAAgB,YAAM;MAAE;MACtB,KAAI,CAACJ,IAAL,iBAAwBL,IAAxB,EADoB,CACa;;;MACjC,OAAOU,OAAO,CAACC,OAAR,EAAP,CAFoB,CAEK;IAC1B,CAHD;EAID;;SAEDb,MAAA,aAAIc,IAAJ,EAAU;IAAA;;IACR,KAAKV,KAAL,CAAWO,IAAX,CAAgB,YAAM;MACpB,MAAI,CAACJ,IAAL,kBAAyBO,IAAzB;;MACA,OAAOF,OAAO,CAACC,OAAR,EAAP;IACD,CAHD;IAIA,OAAO,IAAP,CALQ,CAKI;EACb;;SAEDZ,QAAA,eAAMc,EAAN,EAAU;IAAA;;IACR,KAAKX,KAAL,CAAWO,IAAX,CAAgB,YAAM;MAAE;MACtB,MAAI,CAACJ,IAAL;;MACA,OAAO,IAAIK,OAAJ,CAAY,UAAAC,OAAO,EAAI;QAC5BG,UAAU,CAAC,YAAM;UACf,MAAI,CAACT,IAAL,YAAmBQ,EAAE,GAAG,IAAxB;;UACAF,OAAO;QACR,CAHS,EAGPE,EAHO,CAAV,CAD4B,CAIrB;MACR,CALM,CAAP;IAMD,CARD;IASA,OAAO,IAAP,CAVQ,CAUI;EACb;;SAEKT;2EAAN;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA,4CACuB,KAAKF,KAD5B;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cACaa,MADb;cAAA;cAAA,OAEUA,MAAM,EAFhB;;YAAA;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA","sourceRoot":"/","sourcesContent":["cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    logLabel: cc.Label, // kéo node Label vào đây\n  },\n\n  start() { //dc goi khi node được tạo\n    // Truyền label xuống LazyMan để in ra\n    const lazyMan = new LazyMan('jack', this.logLabel);//method chaining\n    lazyMan\n      .eat('apple')\n      .sleep(5000)\n      .eat('hamburger')\n      .sleep(3000)\n      .eat('pear');\n  },\n});\n\nclass LazyMan {\n  constructor(name, label) {\n    this.queue = []; // hang doi cac ham\n    this.label = label; // giữ tham chiếu label\n    this.sayName(name);// hanh dong dau tien them vao queue\n    this._run(); // bắt đầu thực thi hàng đợi\n  }\n\n  _log(message) {\n    cc.log(message);// in ra console\n    if (this.label) {\n      this.label.string += message + '\\n'; // them vao label\n    }\n  }\n\n  sayName(name) { // them 1 ham vao queue\n    this.queue.push(() => { // \n      this._log(`My name is ${name}`); //lgo name\n      return Promise.resolve();//tra ve promise hoan thanh\n    });\n  }\n\n  eat(food) {\n    this.queue.push(() => {\n      this._log(`I am eating ${food}`);\n      return Promise.resolve();\n    });\n    return this;// de chaining lien ket .sleep().eat() lien tuc\n  }\n\n  sleep(ms) {\n    this.queue.push(() => { // them vao queue, them setTimeout()\n      this._log(`I am sleeping...`);\n      return new Promise(resolve => {\n        setTimeout(() => {\n          this._log(`After ${ms / 1000} seconds`);\n          resolve();\n        }, ms);// sleep xong goi resolve\n      });\n    });\n    return this;// de chaining lien ket .sleep().eat() lien tuc\n  }\n\n  async _run() { // chay lan luot action\n    for (const action of this.queue) {\n      await action(); //await de chay lan luot\n    }\n  }\n}\n"]}