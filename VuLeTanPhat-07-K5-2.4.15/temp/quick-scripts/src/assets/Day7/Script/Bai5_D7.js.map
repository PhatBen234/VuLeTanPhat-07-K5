{"version":3,"sources":["assets/Day7/Script/Bai5_D7.js"],"names":["cc","Class","Component","properties","latencyLabel","Label","onLoad","measuraLatency","getServerTime","fetch","window","location","href","method","response","serverDate","headers","get","Error","Date","getTime","error","message","startTime","resultText","i","currentTime","latency","log","string"],"mappings":";;;;;;+CACA;;;;;;AADAA,EAAE,CAACC,KAAH,CAAS;EACP,WAASD,EAAE,CAACE,SADL;EAGPC,UAAU,EAAE;IACVC,YAAY,EAAEJ,EAAE,CAACK;EADP,CAHL;EAOPC,MAPO,oBAOE;IACP,KAAKC,cAAL;EACD,CATM;EAWDC,aAXC,2BAWe;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEKC,KAAK,CAACC,MAAM,CAACC,QAAP,CAAgBC,IAAjB,EAAuB;gBACjDC,MAAM,EAAE;cADyC,CAAvB,CAFV;;YAAA;cAEZC,QAFY;cAMZC,UANY,GAMCD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,MAArB,CAND;;cAAA,IAQbF,UARa;gBAAA;gBAAA;cAAA;;cAAA,MASV,IAAIG,KAAJ,CAAU,qCAAV,CATU;;YAAA;cAAA,iCAYX,IAAIC,IAAJ,CAASJ,UAAT,EAAqBK,OAArB,EAZW;;YAAA;cAAA;cAAA;cAclBpB,EAAE,CAACqB,KAAH,CAAS,iCAAT,EAA4C,YAAIC,OAAhD,EAdkB,CAelB;;cAfkB,iCAgBX,IAAIH,IAAJ,GAAWC,OAAX,EAhBW;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAkBrB,CA7BM;EA+BDb,cA/BC,4BA+BgB;IAAA;;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACC,KAAI,CAACC,aAAL,EADD;;YAAA;cACjBe,SADiB;cAEjBC,UAFiB,GAEJ,EAFI;cAIZC,CAJY,GAIR,CAJQ;;YAAA;cAAA,MAILA,CAAC,GAAG,EAJC;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAKO,KAAI,CAACjB,aAAL,EALP;;YAAA;cAKbkB,WALa;cAMbC,OANa,GAMHD,WAAW,GAAGH,SANX;cAOnBA,SAAS,GAAGG,WAAZ;cAEA1B,EAAE,CAAC4B,GAAH,CAAO,aAAaD,OAApB,EATmB,CAWnB;;cACAH,UAAU,IAAI,aAAaG,OAAb,GAAuB,MAArC,CAZmB,CAcnB;;cACA,IAAI,KAAI,CAACvB,YAAT,EAAuB;gBACrB,KAAI,CAACA,YAAL,CAAkByB,MAAlB,GAA2BL,UAA3B;cACD;;YAjBkB;cAIGC,CAAC,EAJJ;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAmBtB;AAlDM,CAAT,GAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourceRoot":"/","sourcesContent":["cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    latencyLabel: cc.Label,\n  },\n\n  onLoad() {\n    this.measuraLatency();\n  },\n\n  async getServerTime() {\n    try {\n      const response = await fetch(window.location.href, {\n        method: 'HEAD',\n      });\n\n      const serverDate = response.headers.get(\"Date\");\n\n      if (!serverDate) {\n        throw new Error(\"Không lấy được thời gian từ header.\");\n      }\n\n      return new Date(serverDate).getTime();\n    } catch (err) {\n      cc.error(\"❌ Lỗi khi lấy thời gian server:\", err.message);\n      // Trả về thời gian local nếu không lấy được thời gian server\n      return new Date().getTime();\n    }\n  },\n\n  async measuraLatency() {\n    let startTime = await this.getServerTime();\n    let resultText = \"\";\n    \n    for (let i = 0; i < 10; i++) {\n      const currentTime = await this.getServerTime();\n      const latency = currentTime - startTime;\n      startTime = currentTime;\n      \n      cc.log('Độ trễ: ' + latency);\n      \n      // Thêm kết quả vào chuỗi hiển thị\n      resultText += 'Độ trễ: ' + latency + 'ms\\n';\n      \n      // Cập nhật label nếu có\n      if (this.latencyLabel) {\n        this.latencyLabel.string = resultText;\n      }\n    }\n  }\n});\n\n//Bắt đầu logLatency()\n// ↓\n// Lấy startTime lần đầu\n// ↓\n// Bắt đầu vòng lặp 10 lần:\n//   ├─ Lần 1:\n//   │   ├─ Gọi getServerTime() → currentTime\n//   │   ├─ latency = currentTime - startTime\n//   │   ├─ In ra log & Label\n//   │   └─ Cập nhật startTime = currentTime\n//   ├─ Delay 1 giây\n//   └─ Lặp lại\n// ↓\n// Kết thúc sau 10 lần\n\n//flow de hieu"]}