cc.Class({
  extends: cc.Component,

  properties: {
    targetPrefab: cc.Prefab, // Prefab c·ªßa b√≥ng
    targetArea: cc.Node, // Node ch·ª©a b√≥ng
    scoreLabel: cc.Label, // Label hi·ªÉn th·ªã ƒëi·ªÉm
    timeLabel: cc.Label, // Label hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i
    numSeconds: 60, // T·ªïng th·ªùi gian ch·∫°y game
    spawnInterval: 1.0, // Th·ªùi gian gi·ªØa m·ªói l·∫ßn t·∫°o b√≥ng
    gamePanel: cc.Node,
  },

  onLoad() {
    this.score = 0; // ƒêi·ªÉm b·∫Øt ƒë·∫ßu
    this.elapsedTime = 0; // Th·ªùi gian ƒë√£ tr√¥i qua
    this.remainingTime = this.numSeconds; // Th·ªùi gian c√≤n l·∫°i cho game

    // B·∫Øt ƒë·∫ßu t·∫°o b√≥ng ƒë·ªãnh k·ª≥
    this.schedule(this.spawnTargetPeriodically, this.spawnInterval);

    // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian
    this.schedule(this.updateTimer, 1.0);

    // Nghe s·ª± ki·ªán khi b√≥ng b·ªã click
    this.node.on("target-clicked", this.onTargetClicked, this);

    // C·∫≠p nh·∫≠t ƒëi·ªÉm v√† th·ªùi gian ngay t·ª´ ƒë·∫ßu
    this.updateScoreLabel();
    this.updateTimerLabel();
  },

  spawnTargetPeriodically() {
    if (this.remainingTime <= 0) {
      this.unschedule(this.spawnTargetPeriodically); // D·ª´ng t·∫°o b√≥ng khi h·∫øt gi·ªù
      console.log("‚è∞ H·∫øt gi·ªù t·∫°o b√≥ng!");
      return;
    }

    const target = cc.instantiate(this.targetPrefab);
    target.parent = this.targetArea;
    target.setPosition(this.getRandomPosition());
  },

  updateTimer() {
    if (this.remainingTime > 0) {
      this.remainingTime -= 1;
      this.updateTimerLabel();
    } else {
      this.unschedule(this.updateTimer);
      console.log("‚è∞ H·∫øt gi·ªù game!");
      this.scoreLabel.node.active = false;
      this.timeLabel.node.active = false;
      // üëâ G·ªçi GamePanel ƒë·ªÉ hi·ªán ƒëi·ªÉm cu·ªëi
      const panelComp = this.gamePanel.getComponent("GamePanel");
      if (panelComp) {
        panelComp.showGameOver(this.score);
      } else {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y GamePanel component!");
      }
    }
  },

  updateTimerLabel() {
    if (this.timeLabel) {
      this.timeLabel.string = "Time: " + this.remainingTime + "s";
    }
  },

  getRandomPosition() {
    const x = Math.random() * 400 - 200;
    const y = Math.random() * 300 - 150;
    return cc.v2(x, y);
  },

  // H√†m t√≠nh ƒëi·ªÉm t·ªïng
  calculateScore(point) {
    this.score += point; // C·ªông ƒëi·ªÉm v√†o t·ªïng ƒëi·ªÉm
    this.updateScoreLabel(); // C·∫≠p nh·∫≠t label ƒëi·ªÉm
  },

  onTargetClicked(point) {
    // G·ªçi h√†m t√≠nh ƒëi·ªÉm khi m·ª•c ti√™u b·ªã click
    console.log(point);

    this.calculateScore(point);
  },

  updateScoreLabel() {
    if (this.scoreLabel) {
      this.scoreLabel.string = "Score: " + this.score; // C·∫≠p nh·∫≠t label hi·ªÉn th·ªã t·ªïng ƒëi·ªÉm
    }
  },

  onDestroy() {
    this.node.off("target-clicked", this.onTargetClicked, this);
    this.unscheduleAllCallbacks(); // D·ª´ng t·∫•t c·∫£ c√°c l·ªãch tr√¨nh khi h·ªßy node
  },
});
